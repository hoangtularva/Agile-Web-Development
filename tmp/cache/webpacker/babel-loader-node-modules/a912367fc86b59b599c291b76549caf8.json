{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from 'react';\n\nvar PayTypeSelector = /*#__PURE__*/function (_React$Component) {\n  _inherits(PayTypeSelector, _React$Component);\n\n  var _super = _createSuper(PayTypeSelector);\n\n  function PayTypeSelector() {\n    _classCallCheck(this, PayTypeSelector);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PayTypeSelector, [{\n    key: \"onPayTypeSelected\",\n    //     render() {\n    //             return (\n    //                 <div className=\"field\">\n    //                 <label htmlFor=\"order_pay_type\">Pay type</label>\n    //                 <select onChange={this.onPayTypeSelected} name=\"order[pay_type]\">\n    //                     <option value=\"\">Select a payment method</option>\n    //                     <option value=\"Check\">Check</option>\n    //                     <option value=\"Credit card\">Credit card</option>\n    //                     <option value=\"Purchase order\">Purchase order</option>\n    //                 </select>\n    //                 </div>\n    //             );\n    //         }\n    //     }\n    // export default PayTypeSelector\n    value: function onPayTypeSelected(event) {\n      console.log(event.target.value);\n    }\n  }]);\n\n  return PayTypeSelector;\n}(React.Component);","map":{"version":3,"sources":["/home/hoangtu/ProjectRubyOnRailsWebMini (copy)/app/javascript/PayTypeSelector/index.jsx"],"names":["React","PayTypeSelector","event","console","log","target","value","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IACMC,e;;;;;;;;;;;;;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;sCAEkBC,K,EAAM;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB;AAAiC;;;;EAlB5BN,KAAK,CAACO,S","sourcesContent":["import React from 'react'\nclass PayTypeSelector extends React.Component {\n//     render() {\n//             return (\n//                 <div className=\"field\">\n//                 <label htmlFor=\"order_pay_type\">Pay type</label>\n//                 <select onChange={this.onPayTypeSelected} name=\"order[pay_type]\">\n//                     <option value=\"\">Select a payment method</option>\n//                     <option value=\"Check\">Check</option>\n//                     <option value=\"Credit card\">Credit card</option>\n//                     <option value=\"Purchase order\">Purchase order</option>\n//                 </select>\n//                 </div>\n//             );\n//         }\n//     }\n  \n// export default PayTypeSelector\n\nonPayTypeSelected(event){console.log(event.target.value);}\n}"]},"metadata":{},"sourceType":"module"}